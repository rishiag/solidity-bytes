id: arrays-append-and-pop
title: Arrays â€” append and pop with bounds
difficulty: beginner
tags: [arrays, storage, basics]
objectives:
  - Use dynamic arrays in storage
  - Append with push and remove with pop
  - Revert on popping an empty array
description: |
  Implement a contract that manages a dynamic `uint[]` in storage.
  
  Requirements:
  - `append(uint value)` pushes to the end.
  - `pop()` removes the last element and returns it; revert if empty.
  - `length()` returns the array length.
  - `at(uint index)` returns the element; revert if out of bounds.
hints:
  - "`push` does not return the new length in Solidity ^0.8."
  - Use `require(arr.length > 0, "EMPTY")` before popping.
starter:
  files:
    - path: contracts/ArrayStore.sol
      content: |
        // SPDX-License-Identifier: MIT
        pragma solidity ^0.8.20;

        contract ArrayStore {
            uint[] private values;

            function append(uint value) external {
                // TODO: push value
            }

            function pop() external returns (uint) {
                // TODO: revert if empty, then pop and return
            }

            function length() external view returns (uint) {
                // TODO: return current length
            }

            function at(uint index) external view returns (uint) {
                // TODO: revert if out of bounds, then return
            }
        }
    - path: hardhat.config.js
      content: |
        require("@nomicfoundation/hardhat-toolbox");
        module.exports = { solidity: "0.8.20" };
tests:
  files:
    - path: test/ArrayStore.test.js
      content: |
        const { expect } = require("chai");
        const { ethers } = require("hardhat");

        describe("ArrayStore", function () {
          it("append, length, at", async function () {
            const Factory = await ethers.getContractFactory("ArrayStore");
            const c = await Factory.deploy();
            await c.append(1);
            await c.append(2);
            expect(await c.length()).to.equal(2);
            expect(await c.at(0)).to.equal(1);
            expect(await c.at(1)).to.equal(2);
          });

          it("pop shrinks and reverts when empty", async function () {
            const Factory = await ethers.getContractFactory("ArrayStore");
            const c = await Factory.deploy();
            await c.append(5);
            await c.append(7);
            await c.pop(); // length -> 1
            await c.pop(); // length -> 0
            expect(await c.length()).to.equal(0);
            await expect(c.pop()).to.be.reverted;
          });

          it("at reverts on OOB", async function () {
            const Factory = await ethers.getContractFactory("ArrayStore");
            const c = await Factory.deploy();
            await expect(c.at(0)).to.be.reverted;
          });
        });
solution:
  files:
    - path: contracts/ArrayStore.sol
      content: |
        // SPDX-License-Identifier: MIT
        pragma solidity ^0.8.20;

        contract ArrayStore {
            uint[] private values;

            function append(uint value) external {
                values.push(value);
            }

            function pop() external returns (uint) {
                require(values.length > 0, "EMPTY");
                uint last = values[values.length - 1];
                values.pop();
                return last;
            }

            function length() external view returns (uint) {
                return values.length;
            }

            function at(uint index) external view returns (uint) {
                require(index < values.length, "OOB");
                return values[index];
            }
        }
visibility: after-pass

