id: immutable-address
title: Immutable Address
category: programming-basics
difficulty: beginner
tags: [immutables, variables, state]
objectives:
  - Declare a public immutable address named creator and set it in the constructor
description: |
  Inside the `Problem` contract, declare a `public immutable` `address` variable named `creator`.
  Set its value inside the constructor to `msg.sender`.
hints:
  - "Immutable variables are set once in the constructor and cannot change afterward"
starter:
  files:
    - path: contracts/Problem.sol
      content: |
        // SPDX-License-Identifier: MIT
        pragma solidity ^0.8.24;

        contract Problem {
            // Goal: declare `address public immutable creator;`
            // and set it in the constructor to msg.sender

        }
    - path: hardhat.config.js
      content: |
        require("@nomicfoundation/hardhat-toolbox");
        module.exports = { solidity: "0.8.24" };
tests:
  files:
    - path: test/Problem.test.js
      content: |
        const { expect } = require("chai");
        const { ethers } = require("hardhat");

        describe("Problem", function () {
          it("sets creator to deployer address", async function () {
            const [deployer] = await ethers.getSigners();
            const Factory = await ethers.getContractFactory("Problem");
            const c = await Factory.deploy();
            expect(await c.creator()).to.equal(deployer.address);
          });
        });
solution:
  files:
    - path: contracts/Problem.sol
      content: |
        // SPDX-License-Identifier: MIT
        pragma solidity ^0.8.24;

        contract Problem {
            address public immutable creator;
            constructor() {
                creator = msg.sender;
            }
        }
explanation: |
  `immutable` stores the value in code at deployment and can only be assigned in the constructor.
  Here we set `creator` to `msg.sender` so the deployer is recorded.
visibility: after-pass

