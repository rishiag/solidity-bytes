id: block-and-tx-globals
title: Read block and transaction globals
difficulty: beginner
tags: [globals, basics]
objectives:
  - Return `block.timestamp`, `block.number`, `msg.sender`, and `msg.value`
description: |
  Implement functions to expose common global variables.
hints:
  - "`msg.value` is only non-zero in payable calls."
starter:
  files:
    - path: contracts/Globals.sol
      content: |
        // SPDX-License-Identifier: MIT
        pragma solidity ^0.8.20;

        contract Globals {
            // TODO: functions nowTs(), blockNum(), caller(), sentValue() payable
        }
    - path: hardhat.config.js
      content: |
        require("@nomicfoundation/hardhat-toolbox");
        module.exports = { solidity: "0.8.20" };
tests:
  files:
    - path: test/Globals.test.js
      content: |
        const { expect } = require("chai");
        const { ethers } = require("hardhat");

        describe("Globals", function () {
          it("exposes common globals", async function () {
            const [a] = await ethers.getSigners();
            const Factory = await ethers.getContractFactory("Globals");
            const c = await Factory.deploy();
            expect(await c.caller()).to.equal(a.address);
            // static call to get return values without tx
            expect(await c.sentValue.staticCall()).to.equal(0);
            expect(await c.sentValue.staticCall({ value: 123 })).to.equal(123);
          });
        });
solution:
  files:
    - path: contracts/Globals.sol
      content: |
        // SPDX-License-Identifier: MIT
        pragma solidity ^0.8.20;

        contract Globals {
            function nowTs() external view returns (uint) { return block.timestamp; }
            function blockNum() external view returns (uint) { return block.number; }
            function caller() external view returns (address) { return msg.sender; }
            function sentValue() external payable returns (uint) { return msg.value; }
        }
visibility: after-pass

