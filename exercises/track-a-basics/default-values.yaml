id: default-values
title: Explore default values of uninitialized types
difficulty: beginner
tags: [variables, basics]
objectives:
  - Expose defaults for `uint`, `int`, `bool`, `address`, and `bytes32`
description: |
  Add public state variables for several types and observe defaults: `0`, `false`, zero address, zero bytes.
hints:
  - Use `public` getters to read values.
starter:
  files:
    - path: contracts/Defaults.sol
      content: |
        // SPDX-License-Identifier: MIT
        pragma solidity ^0.8.20;

        contract Defaults {
            // TODO: declare various public state variables without initializing
        }
    - path: hardhat.config.js
      content: |
        require("@nomicfoundation/hardhat-toolbox");
        module.exports = { solidity: "0.8.20" };
tests:
  files:
    - path: test/Defaults.test.js
      content: |
        const { expect } = require("chai");
        const { ethers } = require("hardhat");

        describe("Defaults", function () {
          it("exposes default values", async function () {
            const Factory = await ethers.getContractFactory("Defaults");
            const c = await Factory.deploy();
            expect(await c.a()).to.equal(0n);
            expect(await c.b()).to.equal(0n);
            expect(await c.c()).to.equal(false);
            expect(await c.d()).to.equal(ethers.ZeroAddress);
            expect(await c.e()).to.equal("0x0000000000000000000000000000000000000000000000000000000000000000");
          });
        });
solution:
  files:
    - path: contracts/Defaults.sol
      content: |
        // SPDX-License-Identifier: MIT
        pragma solidity ^0.8.20;

        contract Defaults {
            uint public a;
            int public b;
            bool public c;
            address public d;
            bytes32 public e;
        }
visibility: after-pass

