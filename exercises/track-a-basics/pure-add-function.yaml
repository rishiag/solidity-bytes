id: pure-add-function
title: Implement a pure add function
difficulty: beginner
tags: [functions, pure, basics]
objectives:
  - Implement `function add(uint a, uint b) public pure returns (uint)`
description: |
  Create a contract with a `pure` add function that returns the sum of two unsigned integers.
hints:
  - "`pure` functions cannot read or modify state."
starter:
  files:
    - path: contracts/Adder.sol
      content: |
        // SPDX-License-Identifier: MIT
        pragma solidity ^0.8.20;

        contract Adder {
            // TODO: add(uint a, uint b)
        }
    - path: hardhat.config.js
      content: |
        require("@nomicfoundation/hardhat-toolbox");
        module.exports = { solidity: "0.8.20" };
tests:
  files:
    - path: test/Adder.test.js
      content: |
        const { expect } = require("chai");
        const { ethers } = require("hardhat");

        describe("Adder", function () {
          it("adds two numbers without state", async function () {
            const Factory = await ethers.getContractFactory("Adder");
            const c = await Factory.deploy();
            expect(await c.add(2, 3)).to.equal(5n);
          });
        });
solution:
  files:
    - path: contracts/Adder.sol
      content: |
        // SPDX-License-Identifier: MIT
        pragma solidity ^0.8.20;

        contract Adder {
            function add(uint a, uint b) public pure returns (uint) {
                return a + b;
            }
        }
visibility: after-pass

