id: custom-errors-intro
title: Declare and use a custom error
difficulty: beginner
tags: [errors, basics]
objectives:
  - Declare `error NotOwner();` and revert when `msg.sender != owner`
description: |
  Create a contract with an `owner` and a function `onlyOwner()` that reverts with `NotOwner()` when called by others.
hints:
  - Use `revert NotOwner();` to save gas over string messages.
starter:
  files:
    - path: contracts/OnlyOwner.sol
      content: |
        // SPDX-License-Identifier: MIT
        pragma solidity ^0.8.20;

        contract OnlyOwner {
            address public owner;
            // TODO: error NotOwner(); constructor sets owner; function onlyOwner()
        }
    - path: hardhat.config.js
      content: |
        require("@nomicfoundation/hardhat-toolbox");
        module.exports = { solidity: "0.8.20" };
tests:
  files:
    - path: test/OnlyOwner.test.js
      content: |
        const { expect } = require("chai");
        const { ethers } = require("hardhat");

        describe("OnlyOwner", function () {
          it("reverts for non-owner", async function () {
            const [owner, other] = await ethers.getSigners();
            const Factory = await ethers.getContractFactory("OnlyOwner");
            const c = await Factory.deploy();
            await c.connect(owner).onlyOwner();
            await expect(c.connect(other).onlyOwner()).to.be.reverted;
          });
        });
solution:
  files:
    - path: contracts/OnlyOwner.sol
      content: |
        // SPDX-License-Identifier: MIT
        pragma solidity ^0.8.20;

        contract OnlyOwner {
            error NotOwner();
            address public owner;
            constructor() { owner = msg.sender; }
            function onlyOwner() external view {
                if (msg.sender != owner) revert NotOwner();
            }
        }
visibility: after-pass

