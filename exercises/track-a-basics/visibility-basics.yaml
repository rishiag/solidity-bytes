id: visibility-basics
title: Implement public, external, internal, and private functions
difficulty: beginner
tags: [functions, visibility, basics]
objectives:
  - Create one function per visibility and understand accessibility
description: |
  Implement four functions with different visibilities. External functions cannot be called internally without `this.`.
hints:
  - `internal` is callable within the contract and derived contracts.
starter:
  files:
    - path: contracts/Vis.sol
      content: |
        // SPDX-License-Identifier: MIT
        pragma solidity ^0.8.20;

        contract Vis {
            function aPublic() public pure returns (uint) { return 1; }
            // TODO: external, internal, private variants returning distinct numbers
        }
    - path: hardhat.config.js
      content: |
        require("@nomicfoundation/hardhat-toolbox");
        module.exports = { solidity: "0.8.20" };
tests:
  files:
    - path: test/Vis.test.js
      content: |
        const { expect } = require("chai");
        const { ethers } = require("hardhat");

        describe("Vis", function () {
          it("external cannot be called internally without this.", async function () {
            const Factory = await ethers.getContractFactory("Vis");
            const c = await Factory.deploy();
            expect(await c.aPublic()).to.equal(1n);
            // just ensure deployment and callable public; other visibilities are verified by presence
            expect(typeof c.aExternal).to.equal("function");
          });
        });
solution:
  files:
    - path: contracts/Vis.sol
      content: |
        // SPDX-License-Identifier: MIT
        pragma solidity ^0.8.20;

        contract Vis {
            function aPublic() public pure returns (uint) { return 1; }
            function aExternal() external pure returns (uint) { return 2; }
            function aInternal() internal pure returns (uint) { return 3; }
            function aPrivate() private pure returns (uint) { return 4; }

            function callInternal() external pure returns (uint) {
                return aInternal();
            }
        }
visibility: after-pass

