id: fixed-vs-var-integers
title: Work with fixed-size integers and casting
difficulty: beginner
tags: [integers, casting, basics]
objectives:
  - Demonstrate `uint8`, `uint256` and casting between sizes
description: |
  Add functions that cast between `uint8` and `uint256`, and show overflow is checked in Solidity ^0.8.
hints:
  - Use `uint8(x)` and `uint256(y)` casts.
starter:
  files:
    - path: contracts/Casts.sol
      content: |
        // SPDX-License-Identifier: MIT
        pragma solidity ^0.8.20;

        contract Casts {
            // TODO: castTo8(uint256) and castTo256(uint8)
        }
    - path: hardhat.config.js
      content: |
        require("@nomicfoundation/hardhat-toolbox");
        module.exports = { solidity: "0.8.20" };
tests:
  files:
    - path: test/Casts.test.js
      content: |
        const { expect } = require("chai");
        const { ethers } = require("hardhat");

        describe("Casts", function () {
          it("casts between sizes", async function () {
            const Factory = await ethers.getContractFactory("Casts");
            const c = await Factory.deploy();
            expect(await c.castTo8(255)).to.equal(255);
            expect(await c.castTo256(250)).to.equal(250);
          });
        });
solution:
  files:
    - path: contracts/Casts.sol
      content: |
        // SPDX-License-Identifier: MIT
        pragma solidity ^0.8.20;

        contract Casts {
            function castTo8(uint256 x) external pure returns (uint8) { return uint8(x); }
            function castTo256(uint8 x) external pure returns (uint256) { return uint256(x); }
        }
visibility: after-pass

