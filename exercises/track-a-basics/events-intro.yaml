id: events-intro
title: Define and emit a basic event
difficulty: beginner
tags: [events, basics]
objectives:
  - Define `event Updated(uint256 value)` and emit it in `set(uint256)`
description: |
  Create a setter that updates a number and emits an event.
hints:
  - Use indexed parameters when helpful for filtering.
starter:
  files:
    - path: contracts/Eventful.sol
      content: |
        // SPDX-License-Identifier: MIT
        pragma solidity ^0.8.20;

        contract Eventful {
            uint256 public number;
            // TODO: event Updated(uint256 value); set(uint256)
        }
    - path: hardhat.config.js
      content: |
        require("@nomicfoundation/hardhat-toolbox");
        module.exports = { solidity: "0.8.20" };
tests:
  files:
    - path: test/Eventful.test.js
      content: |
        const { expect } = require("chai");
        const { ethers } = require("hardhat");

        describe("Eventful", function () {
          it("emits Updated on set", async function () {
            const Factory = await ethers.getContractFactory("Eventful");
            const c = await Factory.deploy();
            await expect(c.set(9)).to.emit(c, "Updated").withArgs(9);
            expect(await c.number()).to.equal(9n);
          });
        });
solution:
  files:
    - path: contracts/Eventful.sol
      content: |
        // SPDX-License-Identifier: MIT
        pragma solidity ^0.8.20;

        contract Eventful {
            event Updated(uint256 value);
            uint256 public number;
            function set(uint256 v) external {
                number = v;
                emit Updated(v);
            }
        }
visibility: after-pass

